/**********************************************************************************************************************
 * \file Motor.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Motor.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Motor_Init(void){
    MODULE_P10.IOCR0.B.PC1 = 0x10;
    MODULE_P02.IOCR4.B.PC7 = 0x10;

    MODULE_P10.IOCR0.B.PC2 = 0x10;
    MODULE_P02.IOCR4.B.PC6 = 0x10;

    GtmAtomPwm_Init();
    GtmAtomPwmA_SetDutyCycle(0);
    GtmAtomPwmB_SetDutyCycle(0);
}
void Motor_movChB(int dir){
    if (dir){
        MODULE_P10.OUT.B.P2 = 1; //諛⑺뼢
    }
    else{
        MODULE_P10.OUT.B.P2 = 0;
    }
    MODULE_P02.OUT.B.P6 = 0; //釉뚮젅�씠�겕
    GtmAtomPwmB_SetDutyCycle(1000);
}
void Motor_stopChB(void){
    MODULE_P02.OUT.B.P6 = 1;
}
void Motor_movChB_PWM(int duty, int dir){
    GtmAtomPwmB_SetDutyCycle(duty*10);
    if (dir){
        MODULE_P10.OUT.B.P2 = 1; //�쉶�쟾諛⑺뼢
    }
    else{
        MODULE_P10.OUT.B.P2 = 0; //�쉶�쟾諛⑺뼢
    }
    MODULE_P02.OUT.B.P6 = 0; // 紐⑦꽣 brake �빐�젣
}


//Motor A
void Motor_movChA(int dir){
    if (dir){
        MODULE_P10.OUT.B.P1 = 1; //諛⑺뼢
    }
    else{
        MODULE_P10.OUT.B.P1 = 0;
    }
    MODULE_P02.OUT.B.P7 = 0; //釉뚮젅�씠�겕 �빐�젣
    GtmAtomPwmA_SetDutyCycle(1000);
}
void Motor_stopChA(void){
    MODULE_P02.OUT.B.P7 = 1;
}
void Motor_movChA_PWM(int duty, int dir){
    GtmAtomPwmA_SetDutyCycle(duty*10);
    if (dir){
        MODULE_P10.OUT.B.P1 = 1; //�쉶�쟾諛⑺뼢
    }
    else{
        MODULE_P10.OUT.B.P1 = 0; //�쉶�쟾諛⑺뼢
    }
    MODULE_P02.OUT.B.P7 = 0; // 紐⑦꽣 brake �빐�젣
}

void Encoder_Init(void){

    //test code for P11.10 echo interrupt, P11.11 trigger pin
    MODULE_P11.IOCR8.B.PC10 = 0x02; /* Set ECHO (P11.10) Pin to input */

    //button interrupt
    uint16 password = IfxScuWdt_getSafetyWatchdogPasswordInline();
    IfxScuWdt_clearSafetyEndinitInline(password);

    //Setting ERU//
    MODULE_SCU.EICR[3].B.EXIS0 = 3;//EICR[3].EXIS0 = ESR6, 3 is 3rd input (P11.10 = REQ6(3))

    MODULE_SCU.EICR[3].B.REN0 = 1;//rising edge
    MODULE_SCU.EICR[3].B.FEN0 = 0;//falling edge

    MODULE_SCU.EICR[3].B.EIEN0 = 1;//enable trigger pulse

    MODULE_SCU.EICR[3].B.INP0 = 0;//determination of output channel for trigger event (Register INP)
    MODULE_SCU.IGCR[3].B.IGP0= 1;// configure output channels, outputgating unit OGU (Register IGPy)


    //ISR setting
    volatile Ifx_SRC_SRCR *src;
    src = (volatile Ifx_SRC_SRCR*) (&MODULE_SRC.SCU.SCUERU[2]);
    src -> B.SRPN = ISR_PRIORITY_Encoder_INT0;
    src -> B.TOS = 0;
    src -> B.CLRR = 1; //clear request
    src -> B.SRE = 1; // interrupt enable;
    IfxScuWdt_setSafetyEndinitInline(password);
}
IFX_INTERRUPT(Encoder_Int0_Handler, 0 , ISR_PRIORITY_Encoder_INT0);
volatile uint64 encoder = 0;
void Encoder_Int0_Handler(void){
//    MODULE_SCU.EIFR.B.INTF0 = 1;
    encoder++;
//    my_printf("s: %d, e: %d\n", timer_start, timer_end);
//    rear_duration = (timer_end - timer_start);
//    distance = 0.0343 * (float)rear_duration / 2.0; // cm/us
//    my_printf("dist: %f", distance);
}

uint64 get_encoder(void){
    return encoder;
}
