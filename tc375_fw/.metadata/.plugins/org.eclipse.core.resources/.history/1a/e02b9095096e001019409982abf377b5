/**********************************************************************************************************************
 * \file PID.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include <stdbool.h>
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
/* PID 변수 */
volatile float left_speed_value = 0;
volatile float right_speed_value = 0;

volatile int prev_left_speed=0;
volatile int prev_right_speed=0;


int overshoot = 0;
int undershoot = 0;
int limit = 0, nolimit = 0;
float settle_time = 0, start_time = 0;
int left_old_e = 0, right_old_e = 0;

float K_p = 10, K_i = 0.9, K_d = 10, K_a = 2;

float left_P_control = 0, left_I_control = 0, left_D_control = 0, left_PID_control = 0;
float right_P_control = 0, right_I_control = 0, right_D_control = 0, right_PID_control = 0;
int left_pwm =0, right_pwm = 0;
///*********************************************************************************************************************/
///*--------------------------------------------Private Variables/Constants--------------------------------------------*/
///*********************************************************************************************************************/
//
///*********************************************************************************************************************/
///*------------------------------------------------Function Prototypes------------------------------------------------*/
///*********************************************************************************************************************/
//
///*********************************************************************************************************************/
///*---------------------------------------------Function Implementations----------------------------------------------*/
///*********************************************************************************************************************/

//8000 : 최고속도 => 1/8000 tick/us  = 1/8 ns  = 0.125 tick/ ns ==> 360rpm
//50000 : 최저 => 1/50000 tick/us = 1/50 ns  = 0.02 tick/ns

/* ───────────────────────────────
    10ms 타이머 인터럽트 서비스루틴 (PID)
─────────────────────────────── */
void Timer_ISR(void)
{
    int left_speed_goal = Get_Target_Speed_L(); //from 4 wheel model
    int right_speed_goal = Get_Target_Speed_R();
    int left_speed = Encoder_Get_V_Left();
    int right_speed = Encoder_Get_V_Right();
    bool left_reverse = (left_speed_goal < 0);
    bool right_reverse = (right_speed_goal < 0);
    Set_Dir(0, left_reverse ? 1 : 0);
    Set_Dir(1, right_reverse ? 1 : 0);

    // 오차
    int left_e_value = left_speed_goal - left_speed;
    int right_e_value = right_speed_goal - right_speed;

    // PID 계산
    left_P_control = K_p * left_e_value;
    left_I_control += K_i * (left_e_value - K_a * (nolimit - limit));
    left_D_control = K_d * (left_e_value - left_old_e);
    left_old_e = left_e_value;
    left_PID_control = left_P_control + left_I_control + left_D_control;

    right_P_control = K_p * right_e_value;
    right_I_control += K_i * (right_e_value - K_a * (nolimit - limit));
    right_D_control = K_d * (right_e_value - right_old_e);
    right_old_e = right_e_value;
    right_PID_control = right_P_control + right_I_control + right_D_control;


    // PWM값 보정 (0-100 확장)
    if (left_speed_goal >= 0) {
        left_pwm = map(left_PID_control, 0, 60*K_p, 20, 100);
        nolimit = left_pwm;
        left_pwm = constrain(left_pwm, 20, 100);
        limit = left_pwm;
    } else {
        left_pwm = map(-left_PID_control, 0, 60*K_p,  20, 100);
        left_pwm = constrain(left_pwm,  20, 100);
    }
    // PWM값 보정 (0-100 확장)
    if (right_speed_goal >= 0) {
        right_pwm = map(right_PID_control, 0, 60*K_p,  20, 100);
        nolimit = right_pwm;
        right_pwm = constrain(right_pwm,  20, 100);
        limit = right_pwm;
    } else {
        right_pwm = map(-right_PID_control, 0, 60*K_p, 20, 100);
        right_pwm = constrain(right_pwm,  20, 100);
    }

    // PWM 출력
    // 하드웨어 PWM 사용 필요(예시로 setPinHigh/Low만 사용)
//    IfxPort_setPinState(MOTOR_ENA_PIN, pwm_value > 128 ? IfxPort_State_high : IfxPort_State_low);
    Motor_Set_Left(left_pwm, Get_Dir(0), Get_Brake(0));
    Motor_Set_Right(right_pwm, Get_Dir(1), Get_Brake(1));
    prev_left_speed = left_speed;
    prev_right_speed = right_speed;

}

/* ------------------------------------------------------------------
   보조 함수
-------------------------------------------------------------------*/
int constrain(int x, int a, int b) {
    return (x < a) ? a : (x > b) ? b : x;
}

// 임의의 범위 mapping 함수 (Arduino 스타일)
int map(float x, float in_min, float in_max, float out_min, float out_max)
{
    return (int)((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
}
